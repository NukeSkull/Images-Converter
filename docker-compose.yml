version: '3.9'

services:
  db:
    image: postgres:12-alpine
    expose:
      - 5432
    ports:
      - '5432:5432'

    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=images_converter

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 5

    volumes:
      - ./data/db:/var/lib/postgresql/data/

    command: [ "postgres", "-c", "listen_addresses=*" ]

  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile

    ports:
      - '3000:3000'

    volumes:
      - ./frontend:/sp-tools-images-converter/frontend

    depends_on:
      - backend

  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
      target: django

    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=images_converter

    ports:
      - '8000:8000'

    env_file:
      - ./.env

    volumes:
      - ./data/backend:/sp-tools-images-converter/media

    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5

  celery_workers:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
      target: celery_workers

    env_file:
      - ./.env

    volumes:
      - ./data/backend:/sp-tools-images-converter/media

    depends_on:
      rabbitmq:
        condition: service_healthy

